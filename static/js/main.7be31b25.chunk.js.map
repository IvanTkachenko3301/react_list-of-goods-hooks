{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","goods","visibleGoods","sort","firstGood","secondGood","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","prevState","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbCC,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAsCK,SAASC,IACd,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAmBMC,EA7CD,SAA2BA,EAA3B,GACsC,IAAzCJ,EAAwC,EAAxCA,SAAUE,EAA8B,EAA9BA,WACNG,EAAY,YAAOD,GAmBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAWC,GAC5B,OAAQR,GACN,KAAKL,EAASc,SACZ,OAAOF,EAAUG,cAAcF,GAEjC,KAAKb,EAASgB,OACZ,OAAOJ,EAAUK,OAASJ,EAAWI,OAEvC,QACE,OAAO,MAITV,GACFG,EAAaQ,UAGRR,EAwBOS,CAAkBlB,EAAiB,CAAEI,WAAUE,eAE7D,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYjB,IAAaL,EAASc,WAEpCS,QA3Be,WACrBjB,EAAYN,EAASc,WAqBjB,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYjB,IAAaL,EAASgB,SAEpCO,QAjCa,WACnBjB,EAAYN,EAASgB,SA2BjB,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAaf,IAEfgB,QAvCQ,WACdf,GAAc,SAAAgB,GAAS,OAAKA,MAiCxB,sBAUEnB,IAAaL,EAASI,MAAQG,IAC9B,wBACEc,KAAK,SACLD,UAAWE,IAAW,mBAAoB,CACxC,WAAYjB,IAAaL,EAASI,OAEpCmB,QA9CI,WACZjB,EAAYN,EAASI,MACrBI,GAAc,IAuCR,sBAYJ,6BACGC,EAAMgB,KAAI,SAAAC,GAAI,OACb,oBAAe,UAAQ,OAAvB,SACGA,GADMA,Y,SA1Gd1B,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KCfL2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7be31b25.chunk.js","sourcesContent":["import { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nexport function getReorderedGoods(goods: string[],\n  { sortType, isReversed }: ReorderOptions) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((firstGood, secondGood) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return firstGood.localeCompare(secondGood);\n\n      case SortType.LENGTH:\n        return firstGood.length - secondGood.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport function App() {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverse = () => {\n    setIsReversed(prevState => !prevState);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className={classNames('button is-danger', {\n              'is-light': sortType !== SortType.NONE,\n            })}\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}